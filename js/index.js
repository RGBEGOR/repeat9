
const questionText = document.getElementsByClassName("question-text")[0];
let optionBox = document.querySelector(".option-box");
const currentQuestionNum = document.querySelector(".current-question-num");
const answerDescription = document.querySelector(".answer-description");
const nextQuestionBtn = document.querySelector(".next-question-btn");
const seeResultBtn = document.querySelector(".see-result-btn");
const correctAnswer = document.querySelector(".correct-answers");
let remainingTime = document.querySelector(".remaining-time");
const timeUpText = document.querySelector(".time-up-text");
const quizBox = document.querySelector(".quiz-box");
const quizOverBox = document.querySelector(".quiz-over-box");
const quizHomeBox = document.querySelector(".quiz-home-box");
const startAgainQuizBtn = document.querySelector(".start-again-quiz-btn");
let goHomeBtn = document.querySelector(".go-home-btn");
const startQuizBtn = document.querySelector(".start-quiz-btn");
let attempt = 0;
let questionIndex = 0;
let score = 0;
let number = 0;
let myArray = [];

let interval;
// Questions, Options and Answers array with Description
myApp = [
  {
    question: "–ö—Ç–æ –∫–æ–º–∞–Ω–¥–æ–≤–∞–ª —Ü–∞—Ä—Å–∫–∏–º–∏ –≤–æ–π—Å–∫–∞–º–∏ –≤–æ –≤—Ä–µ–º—è —à—Ç—É—Ä–º–∞ –ê–Ω–¥–∏–∂–∞–Ω–∞?",
    options: ["–ì–µ–Ω–µ—Ä–∞–ª –ö–∞—É—Ñ–º–∞–Ω", "–ì–µ–Ω–µ—Ä–∞–ª –ú.–°–∫–æ–±–µ–ª–µ–≤", "–ê–±–¥—É—Ä–∞—Ö–º–∞–Ω –ê—Ñ—Ç–æ–±–∞—á–∏", "–ü—É–ª–∞—Ç–±–µ–∫"],
    answer: 1,
    // description: "",
  },
  
  {
    question: "–ö–∞–∫ —Å–ª–æ–≤–æ –µ—â–µ –º–æ–∂–Ω–æ –Ω–∞–∑—ã–≤–∞—Ç—å —Ç–µ—Ä–º–∏–Ω–æ–º ‚Äú–ì–æ–º—Ä—É–ª—å‚Äù?",
    options: ["–ê–≤—Ç–æ–Ω–æ–º–∏—è", "–ú–æ–Ω–æ–ø–æ–ª–∏—è", "–ü–∞—Ä–ª–∞–º–µ–Ω—Ç", "–ß—Ç–æ —Ç–∞–º"],
    answer: 0,
    // description: "",
  },
  
  {
    question: "–° –∫–∞–∫–æ–≥–æ –≥–æ–¥–∞, –≤ –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏–∏, –ø–∞—Ä—Ç–∏—è —Ç—Ä–µ–¥-—é–Ω–∏–æ–Ω–æ–≤ –Ω–∞—á–∞–ª–∞ –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –ª–µ–π–±–æ—Ä–∏—Å—Ç—Å–∫–æ–π?",
    options: ["–ß—Ç–æ —Ç–æ —Ç–∞–º", "–Ω–µ –ø–æ–º–Ω—é", "1906", "ü§∑‚Äç‚ôÄÔ∏è"],
    answer: 2,
    // description: "",
  },
  
  {
    question: " –° –∫–∞–∫–æ–≥–æ –≥–æ–¥–∞, –≤ –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏–∏, –ø–∞—Ä—Ç–∏—è —Ç—Ä–µ–¥-—é–Ω–∏–æ–Ω–æ–≤ –Ω–∞—á–∞–ª–∞ –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –ª–µ–π–±–æ—Ä–∏—Å—Ç—Å–∫–æ–π?",
    options: ["1900", "1906", "1097", "1919"],
    answer: 1,
    // description: "",
  },
  
  {
    question: "–ù–∞–∑–æ–≤–∏—Ç–µ –¥–∞—Ç—É –∏–∑–¥–∞–Ω–∏—è —É–∫–∞–∑–∞ –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –ö–æ–∫–∞–Ω–¥—Å–∫–æ–≥–æ —Ö–∞–Ω—Å—Ç–≤–∞?",
    options: ["19 —Ñ–µ–≤—Ä–∞–ª—è 1876 –≥.", "19 –∏—é–Ω—è 1876 –≥.", "23 –∏—é–Ω—è 1876 –≥.", "23 —Ñ–µ–≤—Ä–∞–ª—è 1876 –≥."],
    answer: 0,
    // description: "",
  },
  {
    question: "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–ª–æ—Å—å –≤ –°–®–ê —É–±–∏–π—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫–∞, –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ –≤ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±—ã—á–∞–µ–≤, –±–µ–∑ —Å—É–¥–∞ –∏ —Å–ª–µ–¥—Å—Ç–≤–∏—è?",
    options: ["–°—É–¥ –õ–∏–Ω—á–∞", "–ö—É-–∫–ª—É–∫—Å-–∫–ª–∞–Ω ", "–°—É–¥ –∞—Ñ—Ä–æ–∞–º–µ—Ä–∏–∫–∞–Ω—Ü–µ–≤", "–†–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"],
    answer: 0,
    // description: "",
  },
  {
    question: ". –í –∫–∞–∫–æ–º –≥–æ–¥—É –≤ –¢–∞—à–∫–µ–Ω—Ç–µ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –ì–æ—Ä–æ–¥—Å–∫–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–º –ø–µ—Ä–µ—Ö–æ–¥–∏–ª–æ –∫ –ì–æ—Ä–æ–¥—Å–∫–æ–π –¥—É–º–µ?",
    options: ["1870", "1885", "1877 –≥.", "1865"],
    answer: 2,
    // description: "",
  },
  {
    question: "–ö—Ç–æ –æ–±—ä—è–≤–∏–ª –≤ –°–®–ê ‚Äú–ø–æ–ª–∏—Ç–∏–∫—É –±–æ–ª—å—à–æ–π –¥—É–±–∏–Ω–∫–∏‚Äù?",
    options: ["–§—Ä–∞–Ω–∫–ª–∏–Ω –†—É–∑–≤–µ–ª—å—Ç", "–í—É–¥—Ä–æ –í–∏–ª—å—Å–æ–Ω", "–¢–µ–æ–¥–æ—Ä –†—É–∑–≤–µ–ª—å—Ç", "–£–∏–ª—å—è–º –¢–∞—Ñ—Ç"],
    answer: 2,
    // description: "",
  },
  {
    question: "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–ª–∏—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–∏ –¥—É—Ö–æ–≤–µ–Ω—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–º –∫–∞–∑–∏-–∫–∞–ª—è–Ω –ø–æ—Ä—É—á–∞–ª —Ä–µ—à–µ–Ω–∏–µ —Å–ø–æ—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤?",
    options: ["–±–µ–∫–∏", "—É–ª–µ–º—ã", "–º—É—Ö–∞–¥–∏—Å—Å—ã", "–∫–∞–∑–∏–∏"],
    answer: 1,
    // description: "",
  },
  {
    question: "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ 10 –¥–µ–∫–∞–±—Ä—è 1898 –≥–æ–¥–∞, –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω –º–∏—Ä–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä –º–µ–∂–¥—É –°–®–ê ‚Äî –ò—Å–ø–∞–Ω–∏–µ–π?",
    options: ["–ü–∞—Ä–∏–∂", "–†–µ–∞–ª–ú–∞–¥—Ä–∏–¥—Å—Ç–∞–Ω", "–õ–∏—Å—Å–∞–±–æ–Ω", "–í–∞—à–∏–Ω–≥—Ç–æ–Ω"],
    answer: 0,
    // description: "",
  },
  {
    question: "–ö–∞–∫–æ–π –æ—Ä–≥–∞–Ω –±—ã–ª –Ω–∞–¥–µ–ª–µ–Ω –ø—Ä–∞–≤–∞–º–∏ –≥–ª–∞–≤–Ω–æ–π —Å—É–¥–µ–±–Ω–æ–π –∏–Ω—Å—Ç–∞–Ω—Ü–∏–∏ –≤—Å–µ–≥–æ –¢—É—Ä–∫–µ—Å—Ç–∞–Ω—Å–∫–æ–≥–æ –∫—Ä–∞—è?",
    options: ["–¢–∞—à–∫–µ–Ω—Ç—Å–∫–∞—è —Å—É–¥–µ–±–Ω–∞—è –ø–∞–ª–∞—Ç–∞", "–°–µ–Ω–∞—Ç", "–°—É–¥–µ–±–Ω–∞—è –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—é", "–û–±–ª–∞—Å—Ç–Ω–æ–π —Å—É–¥"],
    answer: 0,
    // description: "",
  },
  {
    question: "–ö–∞–∫–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–ª–∞—Å—å —Å 1910 –ø–æ 1917 –≥–æ–¥—ã?",
    options: ["–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è", "–ë—Ä–∞–∑–∏–ª—å—Å–∫–∞—è", "–ö—É–±–∏–Ω—Å–∫–∞—è", "–ê—Ä–≥–µ–Ω—Ç–∏–Ω—Å–∫–∞—è"],
    answer: 0,
    // description: "",
  },
  {
    question: "–í –∫–∞–∫–æ–º –≥–æ–¥—É, –ø—Ä–æ–∏–∑–æ—à–ª–æ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–π—Å–∫–æ–º –∏–º–ø–µ—Ä–∏–∏ ‚Äì –æ—Ç–º–µ–Ω–∞ –∫—Ä–µ–ø–æ—Å—Ç–Ω–æ–≥–æ –ø—Ä–∞–≤–∞?",
    options: ["1861 –≥.", "1862 –≥.", "1863 –≥.", "1864 –≥."],
    answer: 0,
    // description: "",
  },
  {
    question: "–ö–∞–∫–∏–µ —Å—É–¥—ã –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∏—Å—å –¥–ª—è –æ—Å–µ–¥–ª–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è?",
    options: ["–°—É–¥—ã –∫–∞–∑–∏–µ–≤", "–°—É–¥—ã –±–∏–µ–≤", "–û–±–ª–∞—Å—Ç–Ω—ã–µ —Å—É–¥—ã", "–ö–æ—Ä–æ—á–µ —Å—É–¥—ã"],
    answer: 0,
    // description: "",
  },
  {
    question: "–í –∫–∞–∫–æ–º –≥–æ–¥—É –≤ –°–®–ê –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –ü–∞—Ä—Ç–∏—è –†–µ—Å–ø—É–±–ª–∏–∫–∞–Ω—Ü–µ–≤?",
    options: ["1854 –≥.", "1838 –≥.", "1834 –≥.", "1828 –≥."],
    answer: 0,
    // description: "",
  },
  
];

function load() {

  number++;
  //   console.log(number);
  questionText.innerHTML = myApp[myArray[questionIndex]].question;
  createOptions();
  scoreBoard();
  currentQuestionNum.innerHTML = number + " / " + myApp.length;
}

function createOptions() {
  optionBox.innerHTML = "";
  let animationDelay = 0.2;
  for (let i = 0; i < myApp[myArray[questionIndex]].options.length; i += 1) {
    // console.log(myApp[questionIndex].options[i]);
    const option = document.createElement("div");
    option.innerHTML = myApp[myArray[questionIndex]].options[i];
    // Now setting attribute for class
    // option.setAttribute("class", "option");
    option.classList.add("option");
    option.id = i;
    option.style.animationDelay = animationDelay + "s";
    animationDelay = animationDelay + 0.2;

    // option.setAttribute("onclick", "check(this)");
    option.addEventListener("click", function () {
      // check(this) === check(option)
      check(this);
    });
    optionBox.appendChild(option);
  }
}

function check(option) {
  //   console.log(option.innerHTML);
  attempt++;
  const id = option.id;
  if (id == myApp[myArray[questionIndex]].answer) {
    console.log("correct");
    option.classList.add("correct");
    score += 1;
    scoreBoard();
  } else {
    console.log("Wrong");
    option.classList.add("wrong");
    for (let i = 0; i < optionBox.children.length; i++) {
      if (optionBox.children[i].id == myApp[myArray[questionIndex]].answer) {
        optionBox.children[i].classList.add("show-correct");
      }
    }
  }
  disableOptions();
  showAnswerDescription();
  showNextQuestionBtn();
  stopTimer();

  if (number == myApp.length) {
    console.log("Quiz Over Mate !!!");
    quizOver();
  }
}

function quizResult() {
  document.querySelector(".total-questions").innerHTML = myApp.length;
  document.querySelector(".total-attempt").innerHTML = attempt;
  document.querySelector(".total-correct").innerHTML = score;
  document.querySelector(".total-wrong").innerHTML = attempt - score;
  const percentage = (score / myApp.length) * 100;
  document.querySelector(".total-percentage").innerHTML =
    percentage.toFixed(2) + "%";
}

function resetQuiz() {
  attempt = 0;
  questionIndex = 0;
  score = 0;
  number = 0;
  // myArray = [];
  // myArray = randomeArrayGenerator();
  // console.log(myArray);
  answerDescription.classList.remove("show");
  // startTimer();
  // load();
}

function quizOver() {
  // quizBox.classList.remove("show");
  nextQuestionBtn.classList.remove("show");
  seeResultBtn.classList.add("show");
}

function timeIsUp() {
  showTimeUpText();
  // timeUpText.classList.add("show");
  // when time is up, show the correct output
  for (let i = 0; i < optionBox.children.length; i++) {
    if (optionBox.children[i].id == myApp[myArray[questionIndex]].answer) {
      optionBox.children[i].classList.add("show-correct");
    }
  }
  disableOptions();
  showAnswerDescription();
  if (number != myApp.length) {
    showNextQuestionBtn();
  } else {
    timeUpText.classList.remove("show");
    quizOver();
  }
  // stopTimer();
}

function startTimer() {
  let timeLimit = 15;
  remainingTime.innerHTML = timeLimit;
  remainingTime.classList.remove("less-time");

  interval = setInterval(() => {
    timeLimit--;
    // console.log(timeLimit);
    if (timeLimit < 10) {
      timeLimit = "0" + timeLimit;
    }
    if (timeLimit < 6) {
      remainingTime.classList.add("less-time");
    }
    remainingTime.innerHTML = timeLimit;
    if (timeLimit == 0) {
      clearInterval(interval);
      timeIsUp();
    }
  }, 1000);
}

function stopTimer() {
  clearInterval(interval);
}

function disableOptions() {
  for (let i = 0; i < optionBox.children.length; i++) {
    // console.log(optionBox.children[i].id);
    // console.log(optionBox.childElementCount);
    // optionBox.children[i].removeAttribute("onclick");
    optionBox.children[i].classList.add("already-answered");
  }
}

function showAnswerDescription() {
  // we will only print description, when there is any predefined exist, otherwise it won't print anything.
  if (typeof myApp[myArray[questionIndex]].description !== "undefined") {
    answerDescription.classList.add("show");
    answerDescription.innerHTML = myApp[myArray[questionIndex]].description;
  }
}

function hideAnswerDescription() {
  answerDescription.classList.remove("show");
  answerDescription.innerHTML = "";
}

function showNextQuestionBtn() {
  nextQuestionBtn.classList.add("show");
}

function hideNextQuestionBtn() {
  nextQuestionBtn.classList.remove("show");
}

function showTimeUpText() {
  timeUpText.classList.add("show");
}

function hideTimeUpText() {
  timeUpText.classList.remove("show");
}

function scoreBoard() {
  correctAnswer.innerHTML = score;
}

nextQuestionBtn.addEventListener("click", nextQuestion);

function nextQuestion() {
  console.log("Abhishek");
  questionIndex++;
  load();
  hideNextQuestionBtn();
  hideAnswerDescription();
  hideTimeUpText();
  startTimer();
}

function randomeArrayGenerator() {
  set = new Set();
  for (let i = 0; set.size != myApp.length; i += 1) {
    set.add(Math.floor(Math.random() * myApp.length));
  }
  return Array.from(set);
}

seeResultBtn.addEventListener("click", () => {
  console.log("See Result Button");
  // quizBox.style.display = "none";
  quizBox.style.display = "none";
  seeResultBtn.classList.remove("show");
  quizOverBox.classList.add("show");
  quizResult();
});

startAgainQuizBtn.addEventListener("click", () => {
  quizBox.classList.add("show");
  quizBox.style.display = "block";
  quizOverBox.classList.remove("show");
  resetQuiz();
  // myArray = [];
  // myArray = randomeArrayGenerator();
  // console.log(myArray);
  // answerDescription.classList.remove("show");
  // startTimer();
  // load();
  // nextQuestion();
  quizStart();
});

goHomeBtn.addEventListener("click", () => {
  quizOverBox.classList.remove("show");
  quizHomeBox.classList.add("show");
  resetQuiz();
});

startQuizBtn.addEventListener("click", quizStart);

function quizStart() {
  quizHomeBox.classList.remove("show");
  // quizBox.classList.add("show");
  quizBox.style.display = "block";
  myArray = randomeArrayGenerator();
  console.log(myArray);
  startTimer();
  load();
}

// window.onload = () => {
//   myArray = randomeArrayGenerator();
//   console.log(myArray);
//   startTimer();
//   load();
// };
